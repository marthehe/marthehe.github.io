{"version":3,"sources":["components/Screen.js","components/NumberButton.js","helpers/add.js","helpers/substract.js","helpers/divide.js","helpers/multiply.js","App.js","serviceWorker.js","index.js"],"names":["ScreenDisplay","screenValue","this","props","react_default","a","createElement","className","Component","NumberButton","_this","number","onClick","add","x","y","substract","divide","multiply","App","state","memoryValue","operationValue","setScreenValue","value","setState","newValue","onClear","onBack","length","toString","slice","onSum","parseInt","onOperator","_this2","class","Screen","components_NumberButton","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.40e0ac10.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass ScreenDisplay extends Component {\n    render() {\n       const screenValue = this.props.screenValue\n     \n      return <div className=\"screen\"> {screenValue} </div>\n    }\n  }\n\n  export default ScreenDisplay;","import React, { Component } from \"react\";\n\nclass NumberButton extends Component {\n    render() {\n       \n      const number = this.props.number\n      return (\n          <button \n            onClick={() => { this.props.onClick(number) }} \n            className={\"calc-button \" + (number === '0' ? 'triple' : '')}\n          >\n            {number}\n         </button>\n      )\n    }\n  }\n\n  export default NumberButton;","export const add = (x, y) => {\n  \n  if (typeof x === \"string\" || typeof y === \"string\") {\n    return null;\n  }\n  return x + y;\n};\n","export const substract = (x, y) => {\n  if (typeof x === \"string\" || typeof y === \"string\") {\n    return null;\n  }\n  return x - y;\n};\n","export const divide = (x, y) => {\n  \n  if (typeof x === \"string\" || typeof y === \"string\") {\n    return null;\n  }\n  \n  return x / y;\n};\n","export const multiply = (x, y) => {\n  if (typeof x === \"string\" || typeof y === \"string\") {\n    return null;\n  }\n  return x * y;\n};\n","import React, { Component } from \"react\";\nimport \"./calculator.css\";\nimport Screen from \"./components/Screen\";\nimport NumberButton from \"./components/NumberButton\";\nimport { add } from \"./helpers/add\";\nimport { substract } from \"./helpers/substract\";\nimport { divide } from \"./helpers/divide\";\nimport { multiply } from \"./helpers/multiply\";\n\nclass App extends Component {\n  state = {\n    screenValue: 0,\n    memoryValue: 0,\n    operationValue: \"\"\n  };\n\n  setScreenValue = value => {\n    this.setState({\n      screenValue: value\n    });\n  };\n\n  onClick = value => {\n    if (\n      this.state.screenValue === 0 ||\n      this.state.memoryValue === this.state.screenValue\n    ) {\n      this.setScreenValue(value);\n    } else if (this.state.operationValue === \"=\") {\n      this.setScreenValue(value);\n      this.setState({\n        operationValue: \"\"\n      });\n    } else {\n      const newValue = this.state.screenValue + value;\n      this.setScreenValue(newValue);\n    }\n  };\n\n  onClear = () => {\n    this.setState({\n      screenValue: \"0\",\n      memoryValue: \"0\"\n    });\n  };\n\n  onBack = () => {\n    if (this.state.screenValue.length === 1) {\n      this.setScreenValue(\"0\");\n    } else {\n      this.setState({\n        screenValue: this.state.screenValue.toString().slice(0, -1)\n      });\n    }\n  };\n\n  onSum = () => {\n    const memoryValue = parseInt(this.state.memoryValue);\n    const screenValue = parseInt(this.state.screenValue);\n\n    if (this.state.operationValue === \"+\") {\n      const value = add(memoryValue, screenValue);\n      this.setScreenValue(value);\n    } else if (this.state.operationValue === \"-\") {\n      const value = substract(memoryValue, screenValue);\n      this.setScreenValue(value);\n    } else if (this.state.operationValue === \"/\") {\n      const value = divide(memoryValue, screenValue);\n      this.setScreenValue(value);\n    } else {\n      const value = multiply(memoryValue, screenValue);\n      this.setScreenValue(value);\n    }\n\n    this.setState({\n      operationValue: \"=\"\n    });\n  };\n\n  onOperator = value => {\n    this.setState({\n      memoryValue: this.state.screenValue,\n      // i wanto to have dynamic value assigned to oparation value\n      operationValue: value\n    });\n  };\n\n  // this.onOperator(\"/\")\n\n  render() {\n    return (\n      <div className=\"container\">\n        <div class=\"calc\">\n          <Screen screenValue={this.state.screenValue} />\n\n          <section class=\"calc-buttons\">\n            <div class=\"calc-row\">\n              <button onClick={this.onClear} className=\"double calc-button\">\n                C\n              </button>\n              <button onClick={this.onBack} className=\"calc-button\">\n                ‚Üê\n              </button>\n              <button\n                onClick={() => {\n                  this.onOperator(\"/\");\n                }}\n                className=\"calc-button\"\n              >\n                /\n              </button>\n            </div>\n            <div class=\"calc-row\">\n              <NumberButton number={\"7\"} onClick={this.onClick} />\n              <NumberButton number={\"8\"} onClick={this.onClick} />\n              <NumberButton number={\"9\"} onClick={this.onClick} />\n              <button\n                onClick={() => {\n                  this.onOperator(\"x\");\n                }}\n                className=\"calc-button\"\n              >\n                x\n              </button>\n            </div>\n            <div class=\"calc-row\">\n              <NumberButton number={\"4\"} onClick={this.onClick} />\n              <NumberButton number={\"5\"} onClick={this.onClick} />\n              <NumberButton number={\"6\"} onClick={this.onClick} />\n              <button\n                onClick={() => {\n                  this.onOperator(\"-\");\n                }}\n                className=\"calc-button\"\n              >\n                -\n              </button>\n            </div>\n            <div class=\"calc-row\">\n              <NumberButton number={\"1\"} onClick={this.onClick} />\n              <NumberButton number={\"2\"} onClick={this.onClick} />\n              <NumberButton number={\"3\"} onClick={this.onClick} />\n              <button\n                onClick={() => {\n                  this.onOperator(\"+\");\n                }}\n                className=\"calc-button\"\n              >\n                +\n              </button>\n            </div>\n            <div class=\"calc-row\">\n              <NumberButton number={\"0\"} onClick={this.onClick} />\n              <button onClick={this.onSum} className=\"calc-button\">\n                =\n              </button>\n            </div>\n          </section>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}